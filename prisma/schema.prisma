generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  
  // SaaS specific fields
  planId        String?
  stripeCustomerId String?
  subscriptionId String?
  subscriptionStatus String?
  currentPeriodEnd DateTime?
  flyersUsed    Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  flyers        Flyer[]
  plan          Plan?     @relation(fields: [planId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Plan {
  id          String @id @default(cuid())
  name        String @unique
  description String
  price       Float
  interval    String // monthly, yearly
  features    Json
  flyerLimit  Int
  templateAccess Json
  stripePriceId String
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  users       User[]
}

model Flyer {
  id              String   @id @default(cuid())
  userId          String
  title           String
  originalFileName String
  filePath        String
  fileType        String
  fileSize        Int
  extractedData   Json
  category        String? // Event, Promo, Job, Newsletter
  templateId      String?
  generatedUrl    String?
  shortUrl        String?
  qrCodePath      String? @db.LongText
  isPublic        Boolean  @default(true)
  viewCount       Int      @default(0)
  editableFields  Json?    // Store user editable fields
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  template        Template? @relation(fields: [templateId], references: [id])
}

model Template {
  id          String @id @default(cuid())
  name        String @unique
  description String
  category    String // Event, Promo, Job, Newsletter
  previewImage String
  htmlContent String @db.Text
  cssContent  String @db.Text
  jsContent   String? @db.Text
  isActive    Boolean @default(true)
  isPremium   Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  flyers      Flyer[]
}